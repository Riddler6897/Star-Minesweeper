##########################################################################################################################################
##########################################################################################################################################
# Names: Bradford Doughty, Steven Pirvu, Matthew LaCroix, Kimberly Atienza
# Date: 5/01/17
# Description: Final project for Compututer Science 132 at Louisiana Tech University Spring 2017. A variation of the classic game 
#               Minesweeper with a constellation theme. 
##########################################################################################################################################
##########################################################################################################################################
from Tkinter import * #We could also use pygame#
from time import time #To set a timer#
from time import sleep #To make the RGBs turn on and off#
import RPi.GPIO as GPIO 

class Minesweeper():

    def __init__(self, master):

        # Imports the tile images used for the game
        self.PlainTile = PhotoImage(file = "images/plaintile.gif")
        self.ClickedTile = PhotoImage(file = "images/clickedtile.gif")
        self.MineTile = PhotoImage(file = "images/minetile.gif")
        self.FlagTile = PhotoImage(file = "images/flagtile.gif")
        self.NumberTile = []
        for x in range (1,9):
            self.NumberTile.append(PhotoImage(file = "images/tile_"+str(x)+".gif"))

        frame = Frame(master)
        frame.pack()
        
        # Simply creates a title for the frame
        self.label1 = Label(frame, text = "Constellation Minesweeper")
        self.label1.grid(row = 0, column = 0, columnspan = 15)

        # Variables for the flags and tiles 
        self.flags = 0
        self.correctFlags = 0
        self.clicked = 0

        # Creating the buttons 
        self.button
        
    def play(): #Will actually run the game#
        pass
        
    def lose(): #Will use GPIO for RGBs and allow the player to start the same level over#
        pass
        
    def score(): #How many non-mine tiles are left to uncover. Could also use GUI to display score for completed levels#
        pass
        
    def plot(): #Plots desired constellations#
        pass
        
    def constellation(): #Which constellation is running#
        pass
        def play():
        def plot():
        def score():
        def lose():
        
    def image(): #actually shows the images. Could show image of constellation. Could show flag image#
        pass
    
    def time_out(): #timer. When the time goes out, the whole program will stop running while still showing score.#
        pass
        
    def sound(): #To play a sound if they win or lose. Can be put under the lose function#
        pass
